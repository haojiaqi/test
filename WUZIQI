package javaapplication20;
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
import javax.swing.*;
public class VVVVV {
public static void main(String[] args) {
        // TODO code application logic here
   ChessFrame cf = new ChessFrame();
   cf.show();
}}
class ChessFrame extends JFrame implements ActionListener {
private String[] strsize={"20x15","30x20","40x30"};
private String[] strmode={"人机对弈","人人对弈"};
public static boolean iscomputer=true,checkcomputer=true;
private int width,height;
private ChessModel cm;
private MainPanel mp;
public ChessFrame() {
   this.setTitle("五子棋游戏");//构造五子棋游戏的主窗体
   cm=new ChessModel(1);
   mp=new MainPanel(cm);
   Container con=this.getContentPane();
   con.add(mp,"Center");
   this.setResizable(false);
   this.addWindowListener(new ChessWindowEvent());
   MapSize(20,15);
   JMenuBar mbar = new JMenuBar();
   this.setJMenuBar(mbar);
   JMenu gameMenu = new JMenu("游戏");
   mbar.add(makeMenu(gameMenu, new Object[] {
    "开局", "棋盘","模式", null, "退出"
    }, this));
  /* JMenu lookMenu =new JMenu("视图");
   mbar.add(makeMenu(lookMenu,new Object[] {
    "Metal","Motif","Windows"
    },this));
   JMenu helpMenu = new JMenu("帮助");
   mbar.add(makeMenu(helpMenu, new Object[] {
    "关于"
   }, this));*/
}
public JMenu makeMenu(Object parent, Object items[], Object target){ //构造五子棋游戏的主菜单
   JMenu m = null;
   if(parent instanceof JMenu)
    m = (JMenu)parent;
   else if(parent instanceof String)
    m = new JMenu((String)parent);
   else
    return null;
   for(int i = 0; i < items.length; i++)
    if(items[i] == null)
     m.addSeparator();
    else if(items[i] == "棋盘"){
     JMenu jm = new JMenu("棋盘");
     ButtonGroup group=new ButtonGroup();
     JRadioButtonMenuItem rmenu;
     for (int j=0;j<strsize.length;j++){
      rmenu=makeRadioButtonMenuItem(strsize[j],target);
      if (j==0)
       rmenu.setSelected(true);
      jm.add(rmenu);
      group.add(rmenu);
     }
     m.add(jm);
    }else if(items[i] == "模式"){
     JMenu jm = new JMenu("模式");
     ButtonGroup group=new ButtonGroup();
     JRadioButtonMenuItem rmenu;
     for (int h=0;h<strmode.length;h++){
      rmenu=makeRadioButtonMenuItem(strmode[h],target);
      if(h==0)
       rmenu.setSelected(true);
      jm.add(rmenu);
      group.add(rmenu);
     }
     m.add(jm);
    }else
     m.add(makeMenuItem(items[i], target));
   return m;
}
public JMenuItem makeMenuItem(Object item, Object target){ //构造五子棋游戏的菜单项
   JMenuItem r = null;
   if(item instanceof String)
    r = new JMenuItem((String)item);
   else if(item instanceof JMenuItem)
    r = (JMenuItem)item;
   else
    return null;
   if(target instanceof ActionListener)
    r.addActionListener((ActionListener)target);
   return r;
}
public JRadioButtonMenuItem makeRadioButtonMenuItem(//构造五子棋游戏的单选按钮式菜单项
    Object item, Object target){
    JRadioButtonMenuItem r = null;
    if(item instanceof String)
       r = new JRadioButtonMenuItem((String)item);
    else if(item instanceof JRadioButtonMenuItem)
       r = (JRadioButtonMenuItem)item;
    else
       return null;
    if(target instanceof ActionListener)
       r.addActionListener((ActionListener)target);
    return r;    }
    public void MapSize(int w,int h){
    setSize(w * 20+50 , h * 20+100 );
    if(this.checkcomputer)
       this.iscomputer=true;
    else
       this.iscomputer=false;
    mp.setModel(cm);
    mp.repaint();
    }
    public boolean getiscomputer(){
    return this.iscomputer;
    }
    public void restart(){
    int modeChess = cm.getModeChess();
    if(modeChess <= 3 && modeChess >= 1){
       cm = new ChessModel(modeChess);
       MapSize(cm.getWidth(),cm.getHeight());
    }else{
       System.out.println("\u81EA\u5B9A\u4E49");
    }    }
    public void actionPerformed(ActionEvent e){
    String arg=e.getActionCommand();
    try{
       if (arg.equals("Windows"))
        UIManager.setLookAndFeel(
         "com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
       else if(arg.equals("Motif"))
     UIManager.setLookAndFeel(
      "com.sun.java.swing.plaf.motif.MotifLookAndFeel");
    else
     UIManager.setLookAndFeel(
      "javax.swing.plaf.metal.MetalLookAndFeel" );
    SwingUtilities.updateComponentTreeUI(this);
   }catch(Exception ee){}
   if(arg.equals("20x15")){
    this.width=20;
    this.height=15;
    cm=new ChessModel(1);
    MapSize(this.width,this.height);
    SwingUtilities.updateComponentTreeUI(this);
   }
   if(arg.equals("30x20")){
    this.width=30;
    this.height=20;
    cm=new ChessModel(2);
    MapSize(this.width,this.height);
    SwingUtilities.updateComponentTreeUI(this);
   }
   if(arg.equals("40x30")){
    this.width=40;
    this.height=30;
    cm=new ChessModel(3);
    MapSize(this.width,this.height);
    SwingUtilities.updateComponentTreeUI(this);
   }
   if(arg.equals("人机对弈")){
    this.checkcomputer=true;
    this.iscomputer=true;
    cm=new ChessModel(cm.getModeChess());
    MapSize(cm.getWidth(),cm.getHeight());
    SwingUtilities.updateComponentTreeUI(this);
   }
   if(arg.equals("人人对弈")){
    this.checkcomputer=false;
    this.iscomputer=false;
    cm=new ChessModel(cm.getModeChess());
    MapSize(cm.getWidth(),cm.getHeight());
    SwingUtilities.updateComponentTreeUI(this);
   }
   if(arg.equals("开局")){
    restart();
   }
   if(arg.equals("关于"))
    JOptionPane.showMessageDialog(this, "五子棋游戏", "关于", 0);
   if(arg.equals("退出"))
    System.exit(0);
}
}
class ChessModel {
private int width,height,modeChess; 
private int x=0,y=0;
private int[][] arrMapShow;
private boolean isOdd,isExist;
public ChessModel() {}
public ChessModel(int modeChess){
   this.isOdd=true;
   if(modeChess == 1){
    PanelInit(20, 15, modeChess);
   }
   if(modeChess == 2){
    PanelInit(30, 20, modeChess);
   }
   if(modeChess == 3){
    PanelInit(40, 30, modeChess);
   }
}
private void PanelInit(int width, int height, int modeChess){ //按照棋盘模式构建棋盘大小
   this.width = width;
   this.height = height;
   this.modeChess = modeChess;
   arrMapShow = new int[width+1][height+1];
   for(int i = 0; i <= width; i++){
    for(int j = 0; j <= height; j++){
     arrMapShow[i][j] = -5;
    }   }}
public boolean getisOdd(){//获取是否交换棋手的标识符
   return this.isOdd;
}
public void setisOdd(boolean isodd){ //设置交换棋手的标识符

   if(isodd)
    this.isOdd=true;
   else
    this.isOdd=false;
}
public boolean getisExist(){//获取某棋盘方格是否有棋子的标识值
   return this.isExist;
}
public int getWidth(){//获取棋盘宽度

   return this.width;
}
public int getHeight(){//获取棋盘高度
   return this.height;
}
public int getModeChess(){//获取棋盘模式
   return this.modeChess;
}
public int[][] getarrMapShow(){//获取棋盘方格上棋子的信息
   return arrMapShow;
}
private boolean badxy(int x, int y){ //判断下子的横向、纵向坐标是否越界
   if(x >= width+20 || x < 0)
    return true;
   return y >= height+20 || y < 0;
}
public boolean chessExist(int i,int j){
   if(this.arrMapShow[i][j]==1 || this.arrMapShow[i][j]==2)
    return true;
   return false;
}
public void readyplay(int x,int y){ //判断该坐标位置是否可下棋子
   if(badxy(x,y))
    return;
   if (chessExist(x,y))
    return;
   this.arrMapShow[x][y]=3;
}
public void play(int x,int y){ //在该坐标位置下棋子
   if(badxy(x,y))
    return;
   if(chessExist(x,y)){
    this.isExist=true;
    return;
   }else
    this.isExist=false;
   if(getisOdd()){
    setisOdd(false);
   this.arrMapShow[x][y]=1;
   }else{
    setisOdd(true);
    this.arrMapShow[x][y]=2;
   }
}
public void computerDo(int width,int height){ //计算机走棋

   int max_black,max_white,max_temp,max=0;
   setisOdd(true);
   System.out.println("计算机走棋 ...");
   for(int i = 0; i <= width; i++){
    for(int j = 0; j <= height; j++){
     if(!chessExist(i,j)){//算法判断是否下子
      max_white=checkMax(i,j,2);//判断白子的最大值
      max_black=checkMax(i,j,1);//判断黑子的最大值
      max_temp=Math.max(max_white,max_black);
      if(max_temp>max){
       max=max_temp;
       this.x=i;
       this.y=j;
      }     }    }   }
   setX(this.x);
   setY(this.y);
   this.arrMapShow[this.x][this.y]=2;
}
public void setX(int x){ //记录电脑下子后的横向坐标
   this.x=x;
}
public void setY(int y){ //记录电脑下子后的纵向坐标
   this.y=y;
}
public int getX(){//获取电脑下子的横向坐标
   return this.x;
}
public int getY(){//获取电脑下子的纵向坐标
   return this.y;
}
public int checkMax(int x, int y,int black_or_white){
   int num=0,max_num,max_temp=0;
   int x_temp=x,y_temp=y;
   int x_temp1=x_temp,y_temp1=y_temp;
   // right
   for(int i=1;i<5;i++){
    x_temp1+=1;
    if(x_temp1>this.width)
     break;
    if(this.arrMapShow[x_temp1][y_temp1]==black_or_white)
     num++;
    else
     break;
   }
   // left
   x_temp1=x_temp;
   for(int i=1;i<5;i++){
    x_temp1-=1;
    if(x_temp1<0)
     break;
    if(this.arrMapShow[x_temp1][y_temp1]==black_or_white)
     num++;
    else
     break;
   }
   if(num<5)
    max_temp=num;

   // up
   x_temp1=x_temp;
   y_temp1=y_temp;
   num=0;
   for(int i=1;i<5;i++){
    y_temp1-=1;
    if(y_temp1<0)
     break;
    if(this.arrMapShow[x_temp1][y_temp1]==black_or_white)
     num++;
    else
     break;
   }
   // down
   y_temp1=y_temp;
   for(int i=1;i<5;i++){
    y_temp1+=1;
    if(y_temp1>this.height)
     break;
    if(this.arrMapShow[x_temp1][y_temp1]==black_or_white)
     num++;
    else
     break;
   }
   if(num>max_temp&&num<5)
    max_temp=num;

   // left_up
   x_temp1=x_temp;
   y_temp1=y_temp;
   num=0;
   for(int i=1;i<5;i++){
    x_temp1-=1;
    y_temp1-=1;
    if(y_temp1<0 || x_temp1<0)
     break;
    if(this.arrMapShow[x_temp1][y_temp1]==black_or_white)
     num++;
    else
     break;
   }
   // right_down
   x_temp1=x_temp;
   y_temp1=y_temp;
   for(int i=1;i<5;i++){
    x_temp1+=1;
    y_temp1+=1;
    if(y_temp1>this.height || x_temp1>this.width)
     break;
    if(this.arrMapShow[x_temp1][y_temp1]==black_or_white)
     num++;
    else
     break;
   }
   if(num>max_temp&&num<5)
    max_temp=num;

   // right_up
   x_temp1=x_temp;
   y_temp1=y_temp;
   num=0;
   for(int i=1;i<5;i++){
    x_temp1+=1;
    y_temp1-=1;
    if(y_temp1<0 || x_temp1>this.width)
     break;
    if(this.arrMapShow[x_temp1][y_temp1]==black_or_white)
     num++;
    else
     break;
   }
   // left_down
   x_temp1=x_temp;
   y_temp1=y_temp;
   for(int i=1;i<5;i++){
    x_temp1-=1;
    y_temp1+=1;
    if(y_temp1>this.height || x_temp1<0)
     break;
    if(this.arrMapShow[x_temp1][y_temp1]==black_or_white)
     num++;
    else
     break;
   }
   if(num>max_temp&&num<5)
    max_temp=num;
   max_num=max_temp;
   return max_num;
}

//判断胜负
public boolean judgeSuccess(int x,int y,boolean isodd){
   int num=1;
   int arrvalue;
   int x_temp=x,y_temp=y;
   if(isodd)
    arrvalue=2;
   else
    arrvalue=1;
   int x_temp1=x_temp,y_temp1=y_temp;
   //判断右边
   for(int i=1;i<6;i++){
    x_temp1+=1;
    if(x_temp1>this.width)
     break;
    if(this.arrMapShow[x_temp1][y_temp1]==arrvalue)
     num++;
    else
     break;
   }
   //左边
   x_temp1=x_temp;
   for(int i=1;i<6;i++){
    x_temp1-=1;
    if(x_temp1<0)
     break;
    if(this.arrMapShow[x_temp1][y_temp1]==arrvalue)
     num++;
    else
     break;
   }
   if(num==5)
    return true;

   //上方
   x_temp1=x_temp;
   y_temp1=y_temp;
   num=1;
   for(int i=1;i<6;i++){
    y_temp1-=1;
    if(y_temp1<0)
     break;
    if(this.arrMapShow[x_temp1][y_temp1]==arrvalue)
     num++;
    else
     break;
   }
   //下方
   y_temp1=y_temp;
   for(int i=1;i<6;i++){
    y_temp1+=1;
    if(y_temp1>this.height)
     break;
    if(this.arrMapShow[x_temp1][y_temp1]==arrvalue)
     num++;
    else
     break;
   }
   if(num==5)
    return true;

   //左上
   x_temp1=x_temp;
   y_temp1=y_temp;
   num=1;
   for(int i=1;i<6;i++){
    x_temp1-=1;
    y_temp1-=1;
    if(y_temp1<0 || x_temp1<0)
     break;
    if(this.arrMapShow[x_temp1][y_temp1]==arrvalue)
     num++;
    else
     break;
   }
   //右下
   x_temp1=x_temp;
   y_temp1=y_temp;
   for(int i=1;i<6;i++){
   x_temp1+=1;
   y_temp1+=1;
   if(y_temp1>this.height || x_temp1>this.width)
    break;
    if(this.arrMapShow[x_temp1][y_temp1]==arrvalue)
     num++;
    else
     break;
   }
   if(num==5)
    return true;

   //右上
   x_temp1=x_temp;
   y_temp1=y_temp;
   num=1;
   for(int i=1;i<6;i++){
    x_temp1+=1;
    y_temp1-=1;
    if(y_temp1<0 || x_temp1>this.width)
     break;
    if(this.arrMapShow[x_temp1][y_temp1]==arrvalue)
     num++;
    else
     break;
   }
   //左下
   x_temp1=x_temp;
   y_temp1=y_temp;
   for(int i=1;i<6;i++){
    x_temp1-=1;
    y_temp1+=1;
    if(y_temp1>this.height || x_temp1<0)
     break;
    if(this.arrMapShow[x_temp1][y_temp1]==arrvalue)
     num++;
    else
     break;
   }
   if(num==5)
    return true;
   return false;
}
public void showSuccess(JPanel jp){
   JOptionPane.showMessageDialog(jp,"你赢了!","win",//赢棋后的提示
    JOptionPane.INFORMATION_MESSAGE);
}
public void showDefeat(JPanel jp){
   JOptionPane.showMessageDialog(jp,"你输了!","lost",//输棋后的提示

    JOptionPane.INFORMATION_MESSAGE);
}}
class MainPanel extends JPanel
implements MouseListener,MouseMotionListener{
private int width,height;//棋盘的宽度和高度
private ChessModel cm;
MainPanel(ChessModel mm){ //根据棋盘模式设定面板的大小
   cm=mm;
   width=cm.getWidth();
   height=cm.getHeight();
   addMouseListener(this);
}
public void setModel(ChessModel mm){ //根据棋盘模式设定棋盘的宽度和高度
   cm = mm;
   width = cm.getWidth();
   height = cm.getHeight();
}
public void paintComponent(Graphics g){
   super.paintComponent(g);
   for(int j = 0; j <= height; j++){
    for(int i = 0; i <= width; i++){
     int v = cm.getarrMapShow()[i][j];
     draw(g, i, j, v);
    }   }}
public void draw(Graphics g, int i, int j, int v){ //根据提供的棋子信息（颜色、坐标）画棋子
   int x = 20 * i+20;
   int y = 20 * j+20;
   if(i!=width && j!=height){   //画棋盘
    g.setColor(Color.black);
    g.drawRect(x,y,20,20);
   }
     if(v == 1 ){ //画黑色棋子
    g.setColor(Color.gray);
    g.drawOval(x-8,y-8,16,16);
    g.setColor(Color.black);
    g.fillOval(x-8,y-8,16,16);
   }
     if(v == 2 ){ //画白色棋子
    g.setColor(Color.gray);
    g.drawOval(x-8,y-8,16,16);
    g.setColor(Color.white);
    g.fillOval(x-8,y-8,16,16);
   }
   if(v ==3){
    g.setColor(Color.cyan);
    g.drawOval(x-8,y-8,16,16);
   }
}
public void mousePressed(MouseEvent evt){ //根据下棋判断胜负等
   int x = (evt.getX()-10) / 20;
   int y = (evt.getY()-10) / 20;
   System.out.println(x+" "+y);
   if (evt.getModifiers()==MouseEvent.BUTTON1_MASK){
    cm.play(x,y);
    System.out.println(cm.getisOdd()+" "+cm.getarrMapShow()[x][y]);
    repaint();
    if(cm.judgeSuccess(x,y,cm.getisOdd())){
     cm.showSuccess(this);
     evt.consume();
     ChessFrame.iscomputer=false;
    }
       if(ChessFrame.iscomputer&&!cm.getisExist()){//判断是否为人机对弈
     cm.computerDo(cm.getWidth(),cm.getHeight());
     repaint();
     if(cm.judgeSuccess(cm.getX(),cm.getY(),cm.getisOdd())){
      cm.showDefeat(this);
      evt.consume();
     }    }   }}
public void mouseClicked(MouseEvent evt){}
public void mouseReleased(MouseEvent evt){}
public void mouseEntered(MouseEvent mouseevt){}
public void mouseExited(MouseEvent mouseevent){}
public void mouseDragged(MouseEvent evt){}
public void mouseMoved(MouseEvent moveevt){ //响应鼠标的拖动事件
   int x = (moveevt.getX()-10) / 20;
   int y = (moveevt.getY()-10) / 20;
   cm.readyplay(x,y);
   repaint();
}}
class ChessWindowEvent extends WindowAdapter{
public void windowClosing(WindowEvent e){
   System.exit(0);
}ChessWindowEvent()
{}}       
